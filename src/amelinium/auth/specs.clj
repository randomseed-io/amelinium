(ns

    amelinium.auth.specs

  (:refer-clojure :exclude [parse-long uuid random-uuid])

  (:require
   [clojure.spec.alpha       :as        s]
   [io.randomseed.utils      :refer  :all]))

(s/def :amelinium.auth/encrypt-fn ifn?)
(s/def :amelinium.auth/check-fn   ifn?)
(s/def :amelinium.auth/wait-fn    ifn?)

;; Single password (component of password entry),
;; plain and encrypted version

(s/def :amelinium.auth.plain/password
 (s/or :string string? :bytes bytes?))

(s/def :amelinium.auth.encrypted/password
  bytes?)

;; Handler identifier (part of a password entry)

(s/def :amelinium.auth.password/handler-id
  qualified-symbol?)

;; Shared part of a password entry (after splitting)

(s/def :amelinium.auth.password/shared
  (s/keys :req-un [:amelinium.auth.password/handler-id]))

;; Intrinsic part of a password entry (after splitting)

(s/def :amelinium.auth.password/intrinsic
  map?)

;; Dual password entry (shared and intrinsic parts as a map)

(s/def :amelinium.auth.password/dual
  (s/keys :req-un [:amelinium.auth.password/shared
                   :amelinium.auth.password/intrinsic]))

;; Password entry

(s/def :amelinium.auth/password
  (s/keys :req-un [:amelinium.auth.password/handler-id]))

;; Password chain (sequence of password entries)

(s/def :amelinium.auth.password-chain/last
  (s/keys :req-un [:amelinium.auth.password/handler-id
                   :amelinium.auth.encrypted/password]))

(s/def :amelinium.auth/password-chain
  (s/and (s/coll-of :amelinium.auth/password)
         #(s/valid? :amelinium.auth.password-chain/last (last %))))

(s/def :amelinium.auth.password-chain/shared
  (s/coll-of :amelinium.auth.password/shared))

(s/def :amelinium.auth.password-chain/intrinsic
  (s/and (s/coll-of :amelinium.auth.password/intrinsic)
         #(s/valid? :amelinium.auth.password-chain/last (last %))))

(s/def :amelinium.auth.password-chain/dual
  (s/keys :req-un [:amelinium.auth.password-chain/shared
                   :amelinium.auth.password-chain/intrinsic]))

;; Settings are generated by parsing a configuration

(s/def :amelinium.auth.settings.cipher.handler/id
  qualified-symbol?)

;; Cipher is a map of parameters used to create a password entry
;; during the encryption process. Multiple ciphers create a chain.

(s/def :amelinium.auth.settings.cipher/name
  (s/or :string string? :identifier ident?))

(s/def :amelinium.auth.settings.cipher/handler
  (s/keys :req-un [:amelinium.auth/check-fn
                   :amelinium.auth/encrypt-fn
                   :amelinium.auth.settings.cipher.handler/id]))

(s/def :amelinium.auth.settings/cipher
  (s/keys :req-un [:amelinium.auth/check-fn
                   :amelinium.auth/encrypt-fn
                   :amelinium.auth.settings.cipher/handler
                   :amelinium.auth.settings.cipher/name]
          :opt-un [:amelinium.auth.settings.cipher/salt-charset
                   :amelinium.auth.settings.cipher/salt-length
                   :amelinium.auth.settings.cipher/salt-prefix
                   :amelinium.auth.settings.cipher/salt-suffix]))

(s/def :amelinium.auth.settings.cipher/shared
  (s/keys :req-un [:amelinium.auth.settings.cipher/handler-id]))

(s/def :amelinium.auth.settings.cipher/intrinsic
  map?)

(s/def :amelinium.auth.settings.cipher/dual
  (s/keys :req-un [:amelinium.auth.settings.cipher/shared
                   :amelinium.auth.settings.cipher/intrinsic]))

(s/def :amelinium.auth.settings/suite
  (s/coll-of :amelinium.auth.settings/cipher))

(s/def :amelinium.auth.settings.suite/shared
  (s/coll-of :amelinium.auth.settings.cipher/shared))

(s/def :amelinium.auth.settings.suite/intrinsic
  (s/coll-of :amelinium.auth.settings.cipher/intrinsic))

(s/def :amelinium.auth.settings.suite/dual
  (s/keys :req-un [:amelinium.auth.settings.suite/shared
                   :amelinium.auth.settings.suite/intrinsic]))

(s/def :amelinium.auth.settings.cipher/salt-charset (s/nilable vector?))
(s/def :amelinium.auth.settings.cipher/salt-prefix  (s/nilable string?))
(s/def :amelinium.auth.settings.cipher/salt-suffix  (s/nilable string?))
(s/def :amelinium.auth.settings.cipher/salt-length  (s/nilable nat-int?))

(s/def :amelinium.auth.pwd/settings
  (s/keys :req-un [:amelinium.auth.settings/suite]
          :opt-un [:amelinium.auth/wait-fn]))

(s/def :amelinium.auth.settings/generic
  (s/keys :opt-un [:amelinium.auth/wait-fn]))

;; Authentication Configuration
;;
;; Data from configuration file which describes authentication parameters.
;; It also contains the :suite key which is a place for configuration
;; of ciphers. The ciphers are then used to process plain passwords
;; and produce encrypted versions represented as password chains.

(s/def :amelinium.auth.config/wait        (s/nilable (s/and number? (s/or :pos pos? :zero zero?))))
(s/def :amelinium.auth.config/wait-min    (s/nilable (s/and number? (s/or :pos pos? :zero zero?))))
(s/def :amelinium.auth.config/wait-max    (s/nilable (s/and number? pos?)))
(s/def :amelinium.auth.config/wait-nouser (s/nilable (s/or :pos pos? :zero zero?)))

(s/def :amelinium.auth.config.cipher/handler      qualified-symbol?)
(s/def :amelinium.auth.config.cipher/name         (s/or :string string? :identifier ident?))
(s/def :amelinium.auth.config.cipher/salt-charset (s/nilable string?))
(s/def :amelinium.auth.config.cipher/salt-prefix  (s/nilable string?))
(s/def :amelinium.auth.config.cipher/salt-suffix  (s/nilable string?))
(s/def :amelinium.auth.config.cipher/salt-length  (s/nilable nat-int?))

(s/def :amelinium.auth.config/cipher
  (s/keys :req-un [:amelinium.auth.config.cipher/handler
                   :amelinium.auth.config.cipher/name]
          :opt-un [:amelinium.auth.config.cipher/salt-charset
                   :amelinium.auth.config.cipher/salt-length
                   :amelinium.auth.config.cipher/salt-prefix
                   :amelinium.auth.config.cipher/salt-suffix]))

(s/def :amelinium.auth.config/suite
  (s/coll-of :amelinium.auth.config/cipher :kind vector?))

(s/def :amelinium.auth/config
  (s/keys :req-un [:amelinium.auth.config/suite]
          :opt-un [:amelinium.auth.config/wait
                   :amelinium.auth.config/wait-min
                   :amelinium.auth.config/wait-max
                   :amelinium.auth.config/wait-nouser]))

(s/def :amelinium.auth/crypto-entry
  (s/or :password        :amelinium.auth/password
        :settings-cipher :amelinium.auth.settings/cipher
        :config-cipher   :amelinium.auth.config/cipher))

(s/def :amelinium.auth/crypto-suite
  (s/or :password-suite :amelinium.auth/password-chain
        :settings-suite :amelinium.auth.settings/suite
        :config-suite   :amelinium.auth.config/suite))
